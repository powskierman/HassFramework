// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-ios17.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name HassFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import Foundation
@_exported import HassFramework
import Starscream
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ConnectionState {
  case disconnected
  case connecting
  case connected
  public static func == (a: HassFramework.ConnectionState, b: HassFramework.ConnectionState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct HAContext : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public struct HAAttributes : Swift.Decodable {
  public let friendlyName: Swift.String
  public init(from decoder: any Swift.Decoder) throws
}
public struct HAState : Swift.Decodable {
  public let entityId: Swift.String
  public let state: Swift.String
  public let attributes: HassFramework.HAAttributes
  public let lastChanged: Swift.String
  public let context: HassFramework.HAContext
  public init(from decoder: any Swift.Decoder) throws
}
public struct HAEventData : Swift.Decodable {
  public let type: Swift.String
  public let event_type: Swift.String
  public let entity_id: Swift.String
  public let old_state: HassFramework.HAState?
  public let new_state: HassFramework.HAState?
  public init(from decoder: any Swift.Decoder) throws
}
public struct HAEventMessage {
  public let eventType: Swift.String
  public let entityId: Swift.String
  public let newState: Swift.String
}
public protocol HassWebSocketDelegate : AnyObject {
  func didReceive(event: Starscream.WebSocketEvent, client: any Starscream.WebSocketClient)
}
public class HassWebSocket : HassFramework.EventMessageHandler {
  public static let shared: HassFramework.HassWebSocket
  @Combine.Published @_projectedValueProperty($connectionState) public var connectionState: HassFramework.ConnectionState {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
  }
  public var $connectionState: Combine.Published<HassFramework.ConnectionState>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var messageId: Swift.Int
  public var onConnectionStateChanged: ((HassFramework.ConnectionState) -> Swift.Void)?
  public var onEventReceived: ((Swift.String) -> Swift.Void)?
  public init()
  public func addEventMessageHandler(_ handler: any HassFramework.EventMessageHandler)
  public func connect(completion: @escaping (Swift.Bool) -> Swift.Void)
  public func disconnect()
  public func subscribeToEvents()
  public func sendTextMessage(_ message: Swift.String)
  public func handleEventMessage(_ message: HassFramework.HAEventData)
  public func setDelegate(_ delegate: any HassFramework.HassWebSocketDelegate)
  public func isConnected() -> Swift.Bool
  @objc deinit
}
extension HassFramework.HassWebSocket : Starscream.WebSocketDelegate {
  public func didReceive(event: Starscream.WebSocketEvent, client: any Starscream.WebSocketClient)
}
public enum MessageType : Swift.String, Swift.Decodable {
  case event
  case result
  case command
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct HAMessage : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
public class WebSocketManager : Foundation.ObservableObject, HassFramework.HassWebSocketDelegate {
  @Combine.Published @_projectedValueProperty($websocket) public var websocket: HassFramework.HassWebSocket {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $websocket: Combine.Published<HassFramework.HassWebSocket>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public static let shared: HassFramework.WebSocketManager
  public init(websocket: HassFramework.HassWebSocket)
  public func connectIfNeeded()
  public func disconnectIfNeeded()
  public func didReceive(event: Starscream.WebSocketEvent, client: any Starscream.WebSocketClient)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public protocol EventMessageHandler {
  func handleEventMessage(_ message: HassFramework.HAEventData)
}
public protocol WebSocketProvider {
  var connectionState: Combine.Published<HassFramework.ConnectionState>.Publisher { get }
  var onConnected: (() -> Swift.Void)? { get set }
  var onDisconnected: (() -> Swift.Void)? { get set }
  var onEventReceived: ((Swift.String) -> Swift.Void)? { get set }
  func connect()
  func disconnect()
  func subscribeToEvents()
}
extension HassFramework.ConnectionState : Swift.Equatable {}
extension HassFramework.ConnectionState : Swift.Hashable {}
extension HassFramework.MessageType : Swift.Equatable {}
extension HassFramework.MessageType : Swift.Hashable {}
extension HassFramework.MessageType : Swift.RawRepresentable {}
